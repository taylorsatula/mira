[
  {
    "dependencies": [],
    "description": "\n    Creates and manages automated tasks and sequences that run at scheduled times without user intervention.\n    Use this tool when the user wants to automate tasks, create workflows, or set up recurring activities.\n    \n    \n    This tool supports two types of automations:\n    \n    1. Simple Tasks: Execute a single operation at scheduled times\n       - Direct execution: Run a specific tool operation with predetermined parameters\n       - Orchestrated execution: Use Claude to interpret a task description and determine which tools to use\n       \n    2. Sequences: Execute a series of connected steps with data passing between them\n       - Each step can execute either directly or through Claude\n       - Support for conditional execution, error handling, and alternative paths\n       - Parameters can reference results from previous steps using template syntax\n    \n    The tool supports these operations:\n    \n    1. create_automation: Create a new task or sequence\n       - Required fields: name, type (simple_task or sequence), frequency\n       - For simple_task: execution_mode, tool_name/operation OR task_description\n       - For sequence: steps (list of step definitions)\n       - Optional: scheduled_time, day_of_week, day_of_month, timezone, etc.\n       \n       When creating automations, tools MUST stage the automation for future execution without performing immediate actions. Direct tool invocations during automation creation are prohibited and should be replaced by scheduling mechanisms.\n    \n    2. get_automations: List automations filtered by criteria\n       - Optional filters: type, status, frequency, limit, offset\n    \n    3. get_automation: Get detailed information about a specific automation\n       - Required: automation_id\n    \n    4. update_automation: Modify an existing automation\n       - Required: automation_id\n       - Optional: Any fields to update\n    \n    5. delete_automation: Remove an automation\n       - Required: automation_id\n       Explicit confirmation is required to delete an automation. DO NOT automatically set the value to true. Ask the user if they really want to delete the automation before setting true. AFTER the user confirms that they want to delete the automation set 'confirm=true' to proceed.\n    \n    6. execute_now: Run an automation immediately\n       - Required: automation_id\n       - Optional: initial_context (for sequences)\n    \n    7. pause_automation: Temporarily pause scheduled execution\n       - Required: automation_id\n    \n    8. resume_automation: Resume a paused automation\n       - Required: automation_id\n    \n    9. get_executions: View execution history for an automation\n       - Required: automation_id\n       - Optional: limit, offset\n    \n    10. get_execution_details: Get detailed information about a specific execution\n        - Required: execution_id\n    \n    This tool requires parameters to be passed as a JSON string in the \"kwargs\" field when using the direct APIs.\n    When interacting through Claude, you can use natural language to describe the automation you want to create.\n    \n    Examples:\n    - \"Create a daily reminder to check inventory at 9am\"\n    - \"Set up a weekly chain that generates a sales report and emails it to the team every Monday\"\n    - \"Make a sequence that processes customer data and sends personalized messages\"\n    ",
    "name": "automation_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "The operation to perform **kwargs: Operation-specific parameters",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Manages calendar events for viewing appointments and scheduling. Use this tool when the user needs to check their calendar, \n    see upcoming events, or manage their personal appointments.\n    OPERATIONS:\n    - list_all_events: Lists events from all configured calendars within a date range\n      Parameters:\n        calendar_name (optional): Name of a specific calendar to query (if not provided, shows events from all configured calendars)\n        start_date (optional, default=today): Start date in ISO format (YYYY-MM-DD)\n        end_date (optional, default=7 days from start): End date in ISO format (YYYY-MM-DD)\n    \n    - list_calendars: Lists available calendars on the server\n      Parameters:\n        url (optional): The calendar server URL\n        username (optional): Username for authentication\n        password (optional): Password for authentication\n    \n    - list_events: Lists events from a specific calendar within a date range\n      Parameters:\n        url (optional): The calendar server URL\n        username (optional): Username for authentication\n        password (optional): Password for authentication\n        calendar_id (required): The calendar ID to query\n        start_date (optional, default=today): Start date in ISO format (YYYY-MM-DD)\n        end_date (optional, default=7 days from start): End date in ISO format (YYYY-MM-DD)\n    \n    - create_event: Creates a new calendar event\n      Parameters:\n        url (optional): The calendar server URL\n        username (optional): Username for authentication\n        password (optional): Password for authentication\n        calendar_id (required): The calendar ID to add the event to\n        summary (required): Event title/summary\n        start_time (required): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n        end_time (required): End time in ISO format (YYYY-MM-DDTHH:MM:SS)\n        description (optional): Event description\n        location (optional): Event location\n    \n    - delete_event: Deletes a calendar event\n      Parameters:\n        url (optional): The calendar server URL\n        username (optional): Username for authentication\n        password (optional): Password for authentication\n        calendar_id (required): The calendar ID containing the event\n        event_id (required): The unique ID of the event to delete\n        \n    - read_ical_url: Reads events from a calendar URL\n      Parameters:\n        ical_url (optional): URL to the calendar file\n        start_date (optional, default=today): Start date in ISO format (YYYY-MM-DD)\n        end_date (optional, default=7 days from start): End date in ISO format (YYYY-MM-DD)\n    \n    RESPONSE FORMAT:\n    - All operations return a dictionary with success status and relevant data\n    - Events include summary, start/end times, and optional location and description\n    - Errors include detailed information about what went wrong\n    \n    USAGE NOTES:\n    - Calendars can be configured in the tool settings with user-friendly names\n    - Use list_all_events to see events from all configured calendars at once\n    - For viewing a specific calendar by name, use the calendar_name parameter\n    - Date ranges for listing events should be reasonable (e.g., 1-30 days)\n    - All date and time parameters must be in ISO format\n    - Calendar data is cached for improved performance\n    \n    LIMITATIONS:\n    - Some calendars may be read-only depending on their configuration\n    - Does not support recurring event creation (only displays them)\n    - Limited to basic event properties (no attachments, attendees, or notifications)\n    ",
    "name": "calendar_tool",
    "parameters": {
      "action": {
        "description": "The operation to perform (list_all_events, list_calendars, list_events, create_event, delete_event, read_ical_url)",
        "type": "str"
      },
      "calendar_id": {
        "description": "Calendar ID for CalDAV operations",
        "type": "typing.Optional[str]"
      },
      "calendar_name": {
        "description": "Name of a specific calendar for list_all_events",
        "type": "typing.Optional[str]"
      },
      "description": {
        "description": "Event description for create_event",
        "type": "typing.Optional[str]"
      },
      "end_date": {
        "description": "End date for listing events (YYYY-MM-DD)",
        "type": "typing.Optional[str]"
      },
      "end_time": {
        "description": "Event end time for create_event (YYYY-MM-DDTHH:MM:SS)",
        "type": "typing.Optional[str]"
      },
      "event_id": {
        "description": "Event ID for delete_event",
        "type": "typing.Optional[str]"
      },
      "ical_url": {
        "description": "URL to an iCalendar (.ics) file for read_ical_url",
        "type": "typing.Optional[str]"
      },
      "location": {
        "description": "Event location for create_event",
        "type": "typing.Optional[str]"
      },
      "password": {
        "description": "Password for CalDAV authentication",
        "type": "typing.Optional[str]"
      },
      "start_date": {
        "description": "Start date for listing events (YYYY-MM-DD)",
        "type": "typing.Optional[str]"
      },
      "start_time": {
        "description": "Event start time for create_event (YYYY-MM-DDTHH:MM:SS)",
        "type": "typing.Optional[str]"
      },
      "summary": {
        "description": "Event title/summary for create_event",
        "type": "typing.Optional[str]"
      },
      "url": {
        "description": "CalDAV server URL for direct operations",
        "type": "typing.Optional[str]"
      },
      "username": {
        "description": "Username for CalDAV authentication",
        "type": "typing.Optional[str]"
      }
    },
    "required_parameters": [
      "action"
    ]
  },
  {
    "dependencies": [],
    "description": "Manages a comprehensive customer directory using database storage with robust search and location-based capabilities. This tool allows you to retrieve details about existing customers. DO NOT use this tool if you believe you need to create a new customer or edit an existing customer's details. If you need to create a new customer/edit details use squareviahttp_tool instead.\nThis tool maintains a SQLite database for customer data with support for importing from external systems (currently Square via HTTP API). It provides efficient searching and retrieving of customer data through multiple operations:\n\n1. search_customers: Find customers by various identifiers including name, email, phone number, or address. \n   - Requires 'query' parameter with your search term\n   - Optional 'category' parameter to specify search type: 'name', 'given_name', 'family_name', 'email', 'phone', 'address', or 'any' (default)\n   - Returns matching customer records with contact details\n\n2. find_closest_customers: Locate nearby customers using geographical coordinates.\n   - Requires 'lat' and 'lng' parameters (latitude/longitude)\n   - Optional 'limit' parameter to specify maximum number of results (default: 1)\n   - Optional 'max_distance' parameter to set maximum distance in meters\n   - Optional 'exclude_customer_id' to omit a specific customer\n   - Returns customers sorted by proximity with distance information\n\n3. get_customer: Retrieve a specific customer record by ID.\n   - Requires 'customer_id' parameter\n   - Returns complete customer information\n\n4. rebuild_directory: Refresh the customer database from external systems.\n   - Optional 'source' parameter (currently only supports 'square')\n   - Uses the squareviahttp_tool to retrieve customer data directly from Square API\n   - Automatically handles pagination to retrieve all customers\n   - Returns status information about the rebuild operation",
    "name": "customerdatabase_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Parameters for the specific operation",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Email management tool that provides access to email accounts via IMAP/SMTP protocols. \n    Use this tool to read, search, send, and manage emails.\n    \n    OPERATIONS:\n    - get_emails: Retrieve emails from specified folder with options for filtering and content loading\n      Parameters:\n        folder (optional, default=\"INBOX\"): Email folder to access\n        unread_only (optional, default=False): Set to True to only return unread emails\n        load_content (optional, default=True): Set to True to load full email content\n        sender (optional): Filter by sender email or name\n        max_emails (optional, default=20): Maximum number of emails to return\n    \n    - get_email_content: Get full content of a specific email\n      Parameters:\n        email_id (required): UUID of the email to retrieve\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - mark_as_read: Mark an email as read\n      Parameters:\n        email_id (required): UUID of the email to mark\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - mark_as_unread: Mark an email as unread\n      Parameters:\n        email_id (required): UUID of the email to mark\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - delete_email: Delete an email\n      Parameters:\n        email_id (required): UUID of the email to delete\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - move_email: Move an email to another folder\n      Parameters:\n        email_id (required): UUID of the email to move\n        destination_folder (required): Folder to move the email to\n        folder (optional, default=\"INBOX\"): Source folder containing the email\n    \n    - send_email: Send a new email\n      Parameters:\n        to (required): Recipient email address(es)\n        subject (required): Email subject\n        body (required): Email body content\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n    \n    - reply_to_email: Reply to an existing email\n      Parameters:\n        email_id (required): UUID of the email to reply to\n        body (required): Reply content\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n        \n    - create_draft: Create a draft email without sending\n      Parameters:\n        to (required): Recipient email address(es)\n        subject (required): Email subject\n        body (required): Email body content\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n    \n    - search_emails: Search emails with various criteria\n      Parameters:\n        folder (optional, default=\"INBOX\"): Email folder to search in\n        sender (optional): Sender email or name to search for\n        subject (optional): Subject text to search for\n        start_date (optional): Start date for range search (DD-Mon-YYYY format)\n        end_date (optional): End date for range search (DD-Mon-YYYY format)\n        unread_only (optional, default=False): Set to True to only return unread emails\n        load_content (optional, default=True): Set to True to load full email content\n        max_emails (optional, default=20): Maximum number of emails to return\n        \n    - list_folders: List available email folders\n      Parameters: None\n      \n    - mark_for_later_reply: Mark an email to be replied to later in the conversation\n      Parameters:\n        email_id (required): UUID of the email to mark\n        \n    - get_emails_for_later_reply: Get list of emails marked for later reply\n      Parameters: None\n    \n    USAGE NOTES:\n    - Emails are loaded with full content by default to enable intelligent categorization\n    - The LLM should categorize emails into groups like: from humans, priority, notifications, newsletters\n    - Use the email_id to reference specific emails throughout the conversation\n    - For handling multiple emails efficiently, process them by category\n    - Mark emails for later reply to keep track of emails the user wants to address during the conversation\n    ",
    "name": "email_tool",
    "parameters": {
      "bcc": {
        "description": "BCC recipients for sending emails",
        "type": "typing.Optional[str]"
      },
      "body": {
        "description": "Body text for sending emails",
        "type": "typing.Optional[str]"
      },
      "cc": {
        "description": "CC recipients for sending emails",
        "type": "typing.Optional[str]"
      },
      "destination_folder": {
        "description": "Destination folder for move_email",
        "type": "typing.Optional[str]"
      },
      "email_id": {
        "description": "UUID of a specific email",
        "type": "typing.Optional[str]"
      },
      "end_date": {
        "description": "End date for range search (DD-Mon-YYYY format)",
        "type": "typing.Optional[str]"
      },
      "folder": {
        "description": "Email folder to access (default: \"INBOX\")",
        "type": "str"
      },
      "load_content": {
        "description": "Whether to load full email content",
        "type": "bool"
      },
      "max_emails": {
        "description": "Maximum number of emails to return",
        "type": "typing.Optional[int]"
      },
      "operation": {
        "description": "The operation to perform (get_emails, get_email_content, etc.)",
        "type": "str"
      },
      "sender": {
        "description": "Sender email address or name to search for",
        "type": "typing.Optional[str]"
      },
      "start_date": {
        "description": "Start date for range search (DD-Mon-YYYY format)",
        "type": "typing.Optional[str]"
      },
      "subject": {
        "description": "Subject text to search for",
        "type": "typing.Optional[str]"
      },
      "to": {
        "description": "Recipient for sending emails",
        "type": "typing.Optional[str]"
      },
      "unread_only": {
        "description": "Whether to only return unread emails",
        "type": "bool"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "Provides comprehensive location intelligence and geographical services through Maps API integration. Use this tool when the user needs details of a place, geocoding, or relative information compared to another place.\n\n   This tool enables interaction with mapping services for various location-based operations including:\n   \n   1. geocode: Convert natural language locations to precise coordinates.\n      - Requires 'query' parameter with address, landmark, or place name\n      - Returns formatted address, geographic coordinates, and place information\n   \n   2. reverse_geocode: Convert coordinates to address information.\n      - Requires 'lat' and 'lng' parameters as decimal degrees\n      - Returns detailed address components for the specified location\n   \n   3. place_details: Retrieve comprehensive information about specific places.\n      - Requires 'place_id' parameter (unique place identifier)\n      - Returns name, address, phone number, website, opening hours, and other details\n   \n   4. places_nearby: Discover places around a specific location.\n      - Requires 'lat' and 'lng' parameters for center point\n      - Optional parameters: 'radius' (default 1000m), 'type' (e.g., restaurant), 'keyword', 'open_now'\n      - Returns matching places sorted by proximity with ratings and details\n   \n   5. find_place: Locate specific places by name or description.\n      - Requires 'query' parameter with place name\n      - Returns precise match results with location data\n   \n   6. calculate_distance: Determine distance between two geographic points.\n      - Requires 'lat1', 'lng1', 'lat2', 'lng2' parameters\n      - Returns distance in meters, kilometers, and miles\n   \n   Use this tool for any task requiring location resolution, place discovery, geocoding, or geographic calculations.",
    "name": "maps_tool",
    "parameters": {
      "fields": {
        "description": "Specific fields to request from the API (for find_place)",
        "type": "typing.Optional[typing.List[str]]"
      },
      "keyword": {
        "description": "Search keywords",
        "type": "typing.Optional[str]"
      },
      "language": {
        "description": "Language for results",
        "type": "typing.Optional[str]"
      },
      "lat": {
        "description": "Latitude for operations requiring coordinates",
        "type": "typing.Optional[float]"
      },
      "lat1": {
        "description": "First latitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lat2": {
        "description": "Second latitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lng": {
        "description": "Longitude for operations requiring coordinates",
        "type": "typing.Optional[float]"
      },
      "lng1": {
        "description": "First longitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lng2": {
        "description": "Second longitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "open_now": {
        "description": "Filter results to those open at request time",
        "type": "typing.Optional[bool]"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations)",
        "type": "str"
      },
      "place_id": {
        "description": "Google Places ID for place details",
        "type": "typing.Optional[str]"
      },
      "query": {
        "description": "Search query for geocoding or places text search",
        "type": "typing.Optional[str]"
      },
      "radius": {
        "description": "Search radius in meters for nearby places",
        "type": "typing.Optional[int]"
      },
      "type": {
        "description": "Type of place (e.g., restaurant, cafe)",
        "type": "typing.Optional[str]"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "Manages interactive multi-question surveys to collect structured information from users without sending intermediate responses to the Anthropic API. You can use this tool to collect information if you are confident that clarification cannot reasonably be collected in a single message. This tool also has access to predefined questionnaires for collecting customer details (customer_questionnaire.json) and a recipe generator (recipe_questionnaire.json)\nThis tool enables conducting comprehensive questionnaires with various customization options:\n\n1. Running Questionnaires:\n   - Use predefined questionnaires via 'questionnaire_id' parameter\n   - Create ad-hoc questionnaires with 'questions' parameter (simple string list)\n   - Design custom structured questionnaires with 'custom_questions' parameter\n   - Example: questionnaire_id=\"recipe\" or questions=[\"What's your name?\", \"Where do you live?\"]\n\n2. Question Types and Features:\n   - Simple text questions for free-form responses\n   - Multiple-choice questions with predefined options\n   - Dynamic question generation based on previous answers\n   - Preference key mapping for organizing responses with meaningful labels\n   - Automatic filtering of already-answered questions\n   \n3. Response Handling:\n   - Collects all responses locally without sending to LLM until complete\n   - Returns structured data with question/answer pairs\n   - Maps responses to semantic keys for easier preference management\n   - IMPORTANT: When presenting results, show only the raw data without interpretive commentary\n\nUse this tool whenever you need to gather multiple pieces of structured information from the user in a single interaction session.",
    "name": "questionnaire_tool",
    "parameters": {
      "context_data": {
        "description": "Optional contextual data to use for dynamic question generation and to filter out already answered questions",
        "type": "typing.Optional[typing.Dict[str, typing.Any]]"
      },
      "custom_questions": {
        "description": "Optional list of custom structured question objects Each object should contain at least 'id' and 'text' keys",
        "type": "typing.Optional[typing.List[typing.Dict[str, typing.Any]]]"
      },
      "questionnaire_id": {
        "description": "ID of the questionnaire to use (e.g., \"recipe\") or a name/description for a questionnaire created from simple questions",
        "type": "str"
      },
      "questions": {
        "description": "Optional list of question strings or a JSON string representing a list of strings for on-the-fly questionnaire creation.",
        "type": "typing.Optional[typing.List[str]]"
      }
    },
    "required_parameters": [
      "questionnaire_id"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Manages scheduled reminders with contact information integration. Use this tool when the user\n    wants to create, view, or manage reminders about tasks, follow-ups, or appointments.\n    \n    IMPORTANT: This tool requires parameters to be passed as a JSON string in the \"kwargs\" field.\n    The tool supports these operations:\n    \n    1. add_reminder: Create a new reminder with a date, description, and optional contact info.\n       - Required: title (brief description), date (when to be reminded)\n       - Optional: description (details), contact_name, contact_email, contact_phone\n       - If a contact name is provided, attempts to find matching customer information\n       - Returns the created reminder with a unique identifier\n    \n    2. get_reminders: Retrieve reminders for a specific date range.\n       - Required: date_type (\"today\", \"tomorrow\", \"upcoming\", \"past\", \"all\", \"date\" or \"range\")\n       - If date_type is \"date\", requires specific_date parameter\n       - If date_type is \"range\", requires start_date and end_date parameters\n       - Returns list of reminders matching the criteria\n    \n    3. mark_completed: Mark a reminder as completed.\n       - Required: reminder_id (the ID of the reminder to mark as completed)\n       - Returns the updated reminder\n       \n    4. update_reminder: Update an existing reminder's details.\n       - Required: reminder_id (the ID of the reminder to update)\n       - Optional: Any fields to update (title, description, date, contact information)\n       - Returns the updated reminder\n       \n    5. delete_reminder: Remove a reminder.\n       - Required: reminder_id (the ID of the reminder to delete)\n       - Returns confirmation of deletion\n       \n    This tool automatically integrates with the customer database when contact names are provided,\n    fetching complete contact information for known customers. When creating reminders with a name\n    that doesn't match an existing customer, the tool will prompt for additional contact details.\n    ",
    "name": "reminder_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Parameters for the specific operation",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "Provides access to Square API for managing bookings, customers, and catalog information. Use this tool when the user needs to interact with Square's business management platform.\n    This tool enables interaction with Square API for various operations including:\n   \n    1. Bookings API:\n       - Create bookings with customer details, services, and time slots\n       - Retrieve, update, and cancel existing bookings\n       - Search for available time slots and existing bookings\n       \n    2. Customers API:\n       - Create and update customer profiles\n       - Search for customers by name, email, phone\n       - Retrieve customer details and history\n       \n    3. Catalog API:\n       - Manage services, items, and categories\n       - Search catalog for available services\n       - Retrieve pricing and availability information\n    \n    Each operation provides automatic validation of required parameters and helpful\n    error messages to guide correct API usage. Default values are provided for common\n    parameters like location_id and team_member_id to simplify requests.\n    ",
    "name": "squareapi_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Operation-specific parameters",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Retrieves weather forecast data and calculates heat stress indices for specified locations.\n    Use this tool to get weather forecasts, heat stress information, and related data for planning\n    field work activities based on expected weather conditions.\n    \n    OPERATIONS:\n    - get_forecast: Retrieves weather forecast data for a specific location\n      Parameters:\n        latitude (required): Latitude of the location (-90 to 90)\n        longitude (required): Longitude of the location (-180 to 180)\n        forecast_type (optional): Type of forecast to retrieve (hourly, daily). Default is hourly.\n        date (optional): Specific date for forecast in ISO format (YYYY-MM-DD). If not provided, returns forecast from current date.\n        parameters (optional): Specific parameters to retrieve, comma-separated or as a list. If not provided, returns all available parameters.\n        \n    - get_heat_stress: Retrieves weather data and calculates heat stress indices for a specific location\n      Parameters:\n        latitude (required): Latitude of the location (-90 to 90)\n        longitude (required): Longitude of the location (-180 to 180)\n        forecast_type (optional): Type of forecast to retrieve (hourly, daily). Default is hourly.\n        date (optional): Specific date for forecast in ISO format (YYYY-MM-DD). If not provided, returns forecast from current date.\n        parameters (optional): Additional specific parameters to retrieve beyond those needed for heat stress calculation.\n    \n    RESPONSE FORMAT:\n    - For get_forecast operations: Weather data including requested parameters\n    - For get_heat_stress operations: Weather data plus WBGT values and heat stress risk levels\n    \n    LIMITATIONS:\n    - Forecasts are limited to 7 days into the future\n    - Historical data is not available through this tool\n    - Heat stress calculations are approximations and should be used as guidance, not as definitive safety indicators\n    - Some parameters may not be available for all locations or time periods\n    ",
    "name": "weather_tool",
    "parameters": {
      "date": {
        "description": "Specific date for forecast in ISO format (YYYY-MM-DD)",
        "type": "typing.Optional[str]"
      },
      "forecast_type": {
        "description": "Type of forecast to retrieve (hourly, daily)",
        "type": "typing.Optional[str]"
      },
      "latitude": {
        "description": "Latitude of the location (-90 to 90)",
        "type": "typing.Union[float, str]"
      },
      "longitude": {
        "description": "Longitude of the location (-180 to 180)",
        "type": "typing.Union[float, str]"
      },
      "operation": {
        "description": "The operation to perform (get_forecast, get_heat_stress)",
        "type": "str"
      },
      "parameters": {
        "description": "Specific parameters to retrieve (comma-separated or list)",
        "type": "typing.Union[str, typing.List[str], NoneType]"
      }
    },
    "required_parameters": [
      "operation",
      "latitude",
      "longitude"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Provides comprehensive web access capabilities including HTTP requests, web searches, and webpage content extraction.\n    This integrated tool allows you to interact with web resources through direct HTTP requests to APIs,\n    perform web searches for up-to-date information, and extract clean content from webpages.\n    Use this tool whenever you need to access, search, or extract information from the web.\n    \n    This tool combines three web access capabilities:\n    \n    1. HTTP REQUEST FUNCTIONALITY:\n       Makes HTTP requests to external APIs and web services with various methods, parameters, and headers.\n       \n       Operations:\n       - GET: Retrieve data from a specified URL\n         Parameters:\n           url (required): The URL to send the request to\n           params (optional): Query parameters as a dictionary\n           headers (optional): HTTP headers as a dictionary\n           timeout (optional, default=30): Request timeout in seconds\n           response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n       - POST: Send data to a specified URL\n         Parameters:\n           url (required): The URL to send the request to\n           data (optional): Form data to send (as a string or dictionary)\n           json (optional): JSON data to send (as a dictionary)\n           params (optional): Query parameters as a dictionary\n           headers (optional): HTTP headers as a dictionary\n           timeout (optional, default=30): Request timeout in seconds\n           response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n       - PUT: Update data at a specified URL (parameters same as POST)\n    \n       - DELETE: Delete data at a specified URL (parameters similar to GET)\n    \n    2. WEB SEARCH FUNCTIONALITY:\n       Performs web searches to find up-to-date information from the internet.\n       \n       Operations:\n       - Search the web for information\n         Parameters:\n           query (required): The search query to send to the search engine\n           max_results (optional, default=3): Maximum number of results to return\n           allowed_domains (optional): List of domains to include in results\n           blocked_domains (optional): List of domains to exclude from results\n    \n    3. WEBPAGE EXTRACTION FUNCTIONALITY:\n       Extracts content from webpages using Claude's understanding of web content.\n       \n       Operations:\n       - Extract content from a webpage at a given URL\n         Parameters:\n           url (required): The URL of the webpage to extract content from\n           extraction_prompt (optional): Custom prompt to guide the extraction (default focuses on main content)\n           format (optional, default=\"text\"): Output format - \"text\", \"markdown\", or \"html\"\n           include_metadata (optional, default=False): Whether to include page metadata in the output\n           timeout (optional, default=30): Request timeout in seconds\n    \n    USAGE NOTES:\n    - Use http_request for direct API calls when you know the specific endpoint and parameters\n    - Use web_search when you need to find information but don't have a specific URL\n    - Use webpage_extract when you have a URL but need to get clean, readable content from it\n    - These capabilities can be used together: search for content, then extract from the best result URLs\n    \n    LIMITATIONS:\n    - Cannot make requests to internal network addresses (security restriction)\n    - Search quality depends on query formulation\n    - Very large pages may exceed processing limits\n    - Some websites may block automated access\n    - JavaScript-rendered content may not be fully captured\n    ",
    "name": "webaccess_tool",
    "parameters": {
      "params": {
        "description": "Parameter: params",
        "type": "any"
      }
    },
    "required_parameters": [
      "params"
    ]
  }
]