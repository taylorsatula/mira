{
  "tool_name": "sample_tool",
  "tool_code": "import random\nfrom typing import List, Dict, Any\n\nfrom tools.repo import Tool\nfrom errors import ErrorCode, error_context, ToolError\n\n\nclass WeatherTool(Tool):\n    \"\"\"\n    Weather information retrieval tool for demonstration purposes.\n    \n    This tool serves as a reference implementation demonstrating proper structure\n    and best practices for creating tools in the bot framework. It provides\n    simulated weather data for any location, including current conditions and\n    optional forecast data.\n\n    Key features:\n    1. Parameter validation with helpful error messages\n    2. Proper error handling with the error_context pattern\n    3. Clean separation of public interface and private helper methods\n    4. Comprehensive documentation with detailed docstrings\n    5. Logging of operations for debugging and auditing\n    \"\"\"\n\n    name = \"weather_tool\"\n    description = \"\"\"\n    Retrieves detailed weather information for any specified location. This tool provides current \n    weather data including temperature, conditions, humidity, and wind speed. Use this tool whenever \n    the user asks about weather conditions for a specific location or needs weather-related information \n    for planning purposes.\n    \n    The 'location' parameter accepts any city or region name and is required. The 'units' parameter \n    controls temperature format and defaults to celsius but can be set to fahrenheit. The optional \n    'include_forecast' parameter, when set to true, will return a 5-day weather forecast in addition \n    to current conditions.\n    \n    Note that this tool generates fictional weather data and should not be used for actual weather \n    planning or emergency situations. Response times are typically under 1 second. The tool does not \n    provide historical weather data or severe weather warnings.\n    \"\"\"\n    usage_examples = [\n        {\n            \"input\": {\"location\": \"New York\", \"units\": \"celsius\"},\n            \"output\": {\n                \"temperature\": 22,\n                \"conditions\": \"Partly Cloudy\",\n                \"humidity\": 65,\n                \"wind_speed\": 10\n            }\n        }\n    ]\n\n    def __init__(self):\n        \"\"\"\n        Initialize the weather tool with sample data and configuration.\n        \n        Sets up the tool with predefined weather conditions and initializes\n        logging for tracking operations. This simple initialization demonstrates\n        proper setup patterns for more complex tools.\n        \"\"\"\n        super().__init__()\n        \n        # Tool-specific state - predefined conditions for simulation\n        self.weather_conditions = [\n            \"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Rainy\", \"Thunderstorm\",\n            \"Snowy\", \"Foggy\", \"Windy\", \"Clear\"\n        ]\n        \n        # Initialize logger\n        self.logger.info(\"WeatherTool initialized with simulated data capabilities\")\n\n    def run(\n        self,\n        location: str,\n        units: str = \"celsius\",\n        include_forecast: bool = False\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Get weather information for a specified location.\n\n        This method serves as the main entry point for the tool. It validates inputs,\n        generates weather data based on the provided parameters, and returns a structured\n        response. The method demonstrates proper error handling and input validation\n        patterns.\n\n        Args:\n            location: The city or location to get weather for (required)\n            units: Temperature units ('celsius' or 'fahrenheit', defaults to 'celsius')\n            include_forecast: Whether to include a 5-day forecast (defaults to False)\n\n        Returns:\n            Dictionary containing weather data with the following structure:\n            {\n                \"location\": str,\n                \"temperature\": float,\n                \"units\": str,\n                \"conditions\": str,\n                \"humidity\": int,\n                \"wind_speed\": int,\n                \"forecast\": list (optional)\n            }\n\n        Raises:\n            ToolError: If units are invalid or other errors occur during execution\n        \"\"\"\n        self.logger.info(f\"Fetching weather for {location} in {units}\")\n\n        # Use the centralized error context for weather data generation\n        with error_context(\n            component_name=self.name,\n            operation=\"generating weather data\",\n            error_class=ToolError,\n            error_code=ErrorCode.TOOL_INVALID_INPUT,\n            logger=self.logger\n        ):\n            # Input validation\n            if not location or not isinstance(location, str):\n                raise ToolError(\n                    \"Location must be a non-empty string\",\n                    ErrorCode.TOOL_INVALID_INPUT,\n                    {\"provided_location\": str(location)}\n                )\n            \n            # Validate temperature units\n            if units not in [\"celsius\", \"fahrenheit\"]:\n                raise ToolError(\n                    f\"Invalid units: {units}. Must be 'celsius' or 'fahrenheit'\",\n                    ErrorCode.TOOL_INVALID_INPUT,\n                    {\"provided_units\": units, \"valid_units\": [\"celsius\", \"fahrenheit\"]}\n                )\n\n            # Generate random weather data\n            base_temp = random.randint(5, 35)\n            temp = base_temp if units == \"celsius\" else base_temp * 9/5 + 32\n\n            # Build response with detailed weather information\n            weather_data = {\n                \"location\": location,\n                \"temperature\": round(temp, 1),\n                \"units\": units,\n                \"conditions\": random.choice(self.weather_conditions),\n                \"humidity\": random.randint(30, 90),\n                \"wind_speed\": random.randint(0, 30),\n                \"timestamp\": self._get_current_timestamp()\n            }\n\n            # Add forecast if requested\n            if include_forecast:\n                self.logger.debug(f\"Including forecast data for {location}\")\n                weather_data[\"forecast\"] = self._generate_forecast(base_temp, units)\n\n            return weather_data\n\n    def _get_current_timestamp(self) -> str:\n        \"\"\"\n        Generate a timestamp for the current weather data.\n        \n        This helper method demonstrates proper separation of concerns by\n        moving functionality into discrete, testable methods.\n        \n        Returns:\n            String representation of current timestamp in ISO format\n        \"\"\"\n        from datetime import datetime\n        return datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n    def _generate_forecast(self, base_temp: float, units: str) -> List[Dict[str, Any]]:\n        \"\"\"\n        Generate a fictional 5-day weather forecast.\n        \n        This private helper method creates weather predictions based on the current\n        temperature, with realistic day-to-day variations. It demonstrates proper \n        method organization where complex functionality is separated from the main\n        interface.\n\n        Args:\n            base_temp: Base temperature in celsius to build forecast around\n            units: Temperature units ('celsius' or 'fahrenheit')\n\n        Returns:\n            List of forecast data dictionaries, each containing:\n            - day: int (day number, 1-5)\n            - temperature: float (predicted temperature)\n            - conditions: str (weather conditions description)\n            - humidity: int (percentage)\n            - precipitation_chance: int (percentage)\n            - wind_speed: int (speed value)\n        \"\"\"\n        forecast = []\n        self.logger.debug(f\"Generating 5-day forecast starting from base temp: {base_temp}\u00b0C\")\n\n        for day in range(1, 6):  # 5-day forecast\n            # Create realistic temperature variations\n            temp_change = random.uniform(-5, 5)\n            day_temp = base_temp + temp_change\n\n            if units == \"fahrenheit\":\n                day_temp = day_temp * 9/5 + 32\n\n            # Generate varied conditions with weighted randomness\n            # For a more realistic forecast (conditions tend to persist)\n            if day > 1 and random.random() < 0.7:\n                # 70% chance to maintain similar conditions as previous day\n                conditions = forecast[-1][\"conditions\"]\n            else:\n                conditions = random.choice(self.weather_conditions)\n                \n            # Add forecast data with additional details\n            forecast.append({\n                \"day\": day,\n                \"day_name\": self._get_day_name(day),\n                \"temperature\": round(day_temp, 1),\n                \"conditions\": conditions,\n                \"humidity\": random.randint(30, 90),\n                \"precipitation_chance\": random.randint(0, 100),\n                \"wind_speed\": random.randint(0, 30)\n            })\n\n        return forecast\n        \n    def _get_day_name(self, day_offset: int) -> str:\n        \"\"\"\n        Convert a day offset to a weekday name.\n        \n        Args:\n            day_offset: Number of days from today (1-5)\n            \n        Returns:\n            Name of the weekday (e.g., \"Monday\", \"Tuesday\")\n        \"\"\"\n        import datetime\n        \n        today = datetime.datetime.now()\n        future_date = today + datetime.timedelta(days=day_offset)\n        return future_date.strftime(\"%A\")\n\n\n",
  "description": "A tool that retrieves simulated weather information for any specified location, providing current conditions and optional forecast data.",
  "operations": [
    {
      "name": "run",
      "description": "Gets weather information for a specified location, including temperature, conditions, humidity, and wind speed, with an optional 5-day forecast.",
      "required_parameters": [
        {
          "name": "location",
          "type": "string",
          "description": "The city or location to get weather for"
        }
      ],
      "optional_parameters": [
        {
          "name": "units",
          "type": "string",
          "description": "Temperature units ('celsius' or 'fahrenheit')",
          "default": "celsius"
        },
        {
          "name": "include_forecast",
          "type": "boolean",
          "description": "Whether to include a 5-day forecast",
          "default": false
        }
      ]
    }
  ],
  "complexity_category": "standard",
  "recommended_examples": 45
}