[
  {
    "dependencies": [],
    "description": "\n    Manages personal calendar events via CalDAV protocol. This tool lets you interact with standard calendar servers\n    to schedule, view, and manage personal calendar events. Use this tool ONLY when the user explicitly needs to work \n    with their personal CalDAV-compatible calendar system (like Google Calendar, Apple Calendar, etc.),\n    including checking availability, creating personal appointments, or managing existing calendar events.\n    \n    OPERATIONS:\n    - list_calendars: Lists available calendars on the server\n      Parameters:\n        url (required): The CalDAV server URL\n        username (required): Username for authentication\n        password (required): Password for authentication\n    \n    - list_events: Lists events from a specific calendar within a date range\n      Parameters:\n        url (required): The CalDAV server URL\n        username (required): Username for authentication\n        password (required): Password for authentication\n        calendar_id (required): The calendar ID to query\n        start_date (optional, default=today): Start date in ISO format (YYYY-MM-DD)\n        end_date (optional, default=7 days from start): End date in ISO format (YYYY-MM-DD)\n    \n    - create_event: Creates a new calendar event\n      Parameters:\n        url (required): The CalDAV server URL\n        username (required): Username for authentication\n        password (required): Password for authentication\n        calendar_id (required): The calendar ID to add the event to\n        summary (required): Event title/summary\n        start_time (required): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n        end_time (required): End time in ISO format (YYYY-MM-DDTHH:MM:SS)\n        description (optional): Event description\n        location (optional): Event location\n    \n    - delete_event: Deletes a calendar event\n      Parameters:\n        url (required): The CalDAV server URL\n        username (required): Username for authentication\n        password (required): Password for authentication\n        calendar_id (required): The calendar ID containing the event\n        event_id (required): The unique ID of the event to delete\n    \n    RESPONSE FORMAT:\n    - All operations return a dictionary with success status and relevant data\n    - Errors include detailed information about what went wrong\n    \n    USAGE NOTES:\n    - Use list_calendars first to discover available calendars and their IDs\n    - Date ranges for list_events should be reasonable (e.g., 1-30 days)\n    - All date and time parameters must be in ISO format\n    - Authentication information is used only for the current operation and not stored\n    \n    LIMITATIONS:\n    - Can only connect to CalDAV-compliant servers\n    - Does not support recurring event creation (only displays them)\n    - Limited to basic event properties (no attachments, attendees, or notifications)\n    - Calendar permissions are determined by the provided credentials\n    ",
    "name": "calendar_tool",
    "parameters": {
      "action": {
        "description": "The operation to perform (list_calendars, list_events, create_event, delete_event)",
        "type": "str"
      },
      "description": {
        "description": "Event description for create_event",
        "type": "typing.Optional[str]"
      },
      "end_date": {
        "description": "End date for listing events (YYYY-MM-DD)",
        "type": "typing.Optional[str]"
      },
      "end_time": {
        "description": "Event end time for create_event (YYYY-MM-DDTHH:MM:SS)",
        "type": "typing.Optional[str]"
      },
      "event_id": {
        "description": "Event ID for delete_event",
        "type": "typing.Optional[str]"
      },
      "location": {
        "description": "Event location for create_event",
        "type": "typing.Optional[str]"
      },
      "start_date": {
        "description": "Start date for listing events (YYYY-MM-DD)",
        "type": "typing.Optional[str]"
      },
      "start_time": {
        "description": "Event start time for create_event (YYYY-MM-DDTHH:MM:SS)",
        "type": "typing.Optional[str]"
      },
      "summary": {
        "description": "Event title/summary for create_event",
        "type": "typing.Optional[str]"
      }
    },
    "required_parameters": [
      "action"
    ]
  },
  {
    "dependencies": [],
    "description": "Manages a comprehensive customer directory using SQLite database storage with robust search and location-based capabilities. \n    \nThis tool maintains a SQLite database for customer data with support for importing from external systems (currently Square). It provides efficient searching and retrieving of customer data through multiple operations:\n\n1. search_customers: Find customers by various identifiers including name, email, phone number, or address. \n   - Requires 'query' parameter with your search term\n   - Optional 'category' parameter to specify search type: 'name', 'given_name', 'family_name', 'email', 'phone', 'address', or 'any' (default)\n   - Returns matching customer records with contact details\n\n2. find_closest_customers: Locate nearby customers using geographical coordinates.\n   - Requires 'lat' and 'lng' parameters (latitude/longitude)\n   - Optional 'limit' parameter to specify maximum number of results (default: 1)\n   - Optional 'max_distance' parameter to set maximum distance in meters\n   - Optional 'exclude_customer_id' to omit a specific customer\n   - Returns customers sorted by proximity with distance information\n\n3. get_customer: Retrieve a specific customer record by ID.\n   - Requires 'customer_id' parameter\n   - Returns complete customer information\n\n4. rebuild_directory: Refresh the customer database from external systems.\n   - Optional 'source' parameter (currently only supports 'square')\n   - Returns status information about the rebuild operation",
    "name": "customerdatabase_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Parameters for the specific operation",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Email management tool that provides access to email accounts via IMAP/SMTP protocols. \n    Use this tool to read, search, send, and manage emails.\n    \n    OPERATIONS:\n    - get_emails: Retrieve emails from specified folder with options for filtering and content loading\n      Parameters:\n        folder (optional, default=\"INBOX\"): Email folder to access\n        unread_only (optional, default=False): Set to True to only return unread emails\n        load_content (optional, default=True): Set to True to load full email content\n        sender (optional): Filter by sender email or name\n        max_emails (optional, default=20): Maximum number of emails to return\n    \n    - get_email_content: Get full content of a specific email\n      Parameters:\n        email_id (required): UUID of the email to retrieve\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - mark_as_read: Mark an email as read\n      Parameters:\n        email_id (required): UUID of the email to mark\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - mark_as_unread: Mark an email as unread\n      Parameters:\n        email_id (required): UUID of the email to mark\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - delete_email: Delete an email\n      Parameters:\n        email_id (required): UUID of the email to delete\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n    \n    - move_email: Move an email to another folder\n      Parameters:\n        email_id (required): UUID of the email to move\n        destination_folder (required): Folder to move the email to\n        folder (optional, default=\"INBOX\"): Source folder containing the email\n    \n    - send_email: Send a new email\n      Parameters:\n        to (required): Recipient email address(es)\n        subject (required): Email subject\n        body (required): Email body content\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n    \n    - reply_to_email: Reply to an existing email\n      Parameters:\n        email_id (required): UUID of the email to reply to\n        body (required): Reply content\n        folder (optional, default=\"INBOX\"): Email folder containing the email\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n        \n    - create_draft: Create a draft email without sending\n      Parameters:\n        to (required): Recipient email address(es)\n        subject (required): Email subject\n        body (required): Email body content\n        cc (optional): CC recipient(s)\n        bcc (optional): BCC recipient(s)\n    \n    - search_emails: Search emails with various criteria\n      Parameters:\n        folder (optional, default=\"INBOX\"): Email folder to search in\n        sender (optional): Sender email or name to search for\n        subject (optional): Subject text to search for\n        start_date (optional): Start date for range search (DD-Mon-YYYY format)\n        end_date (optional): End date for range search (DD-Mon-YYYY format)\n        unread_only (optional, default=False): Set to True to only return unread emails\n        load_content (optional, default=True): Set to True to load full email content\n        max_emails (optional, default=20): Maximum number of emails to return\n        \n    - list_folders: List available email folders\n      Parameters: None\n      \n    - mark_for_later_reply: Mark an email to be replied to later in the conversation\n      Parameters:\n        email_id (required): UUID of the email to mark\n        \n    - get_emails_for_later_reply: Get list of emails marked for later reply\n      Parameters: None\n    \n    USAGE NOTES:\n    - Emails are loaded with full content by default to enable intelligent categorization\n    - The LLM should categorize emails into groups like: from humans, priority, notifications, newsletters\n    - Use the email_id to reference specific emails throughout the conversation\n    - For handling multiple emails efficiently, process them by category\n    - Mark emails for later reply to keep track of emails the user wants to address during the conversation\n    ",
    "name": "email_tool",
    "parameters": {
      "bcc": {
        "description": "BCC recipients for sending emails",
        "type": "typing.Optional[str]"
      },
      "body": {
        "description": "Body text for sending emails",
        "type": "typing.Optional[str]"
      },
      "cc": {
        "description": "CC recipients for sending emails",
        "type": "typing.Optional[str]"
      },
      "destination_folder": {
        "description": "Destination folder for move_email",
        "type": "typing.Optional[str]"
      },
      "email_id": {
        "description": "UUID of a specific email",
        "type": "typing.Optional[str]"
      },
      "end_date": {
        "description": "End date for range search (DD-Mon-YYYY format)",
        "type": "typing.Optional[str]"
      },
      "folder": {
        "description": "Email folder to access (default: \"INBOX\")",
        "type": "str"
      },
      "load_content": {
        "description": "Whether to load full email content",
        "type": "bool"
      },
      "max_emails": {
        "description": "Maximum number of emails to return",
        "type": "typing.Optional[int]"
      },
      "operation": {
        "description": "The operation to perform (get_emails, get_email_content, etc.)",
        "type": "str"
      },
      "sender": {
        "description": "Sender email address or name to search for",
        "type": "typing.Optional[str]"
      },
      "start_date": {
        "description": "Start date for range search (DD-Mon-YYYY format)",
        "type": "typing.Optional[str]"
      },
      "subject": {
        "description": "Subject text to search for",
        "type": "typing.Optional[str]"
      },
      "to": {
        "description": "Recipient for sending emails",
        "type": "typing.Optional[str]"
      },
      "unread_only": {
        "description": "Whether to only return unread emails",
        "type": "bool"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Makes HTTP requests to external APIs and web services. This tool lets you interact with \n    web APIs and services by sending HTTP requests with various methods, parameters, and headers.\n    \n    OPERATIONS:\n    - GET: Retrieve data from a specified URL\n      Parameters:\n        url (required): The URL to send the request to\n        params (optional): Query parameters as a dictionary\n        headers (optional): HTTP headers as a dictionary\n        timeout (optional, default=30): Request timeout in seconds\n        response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n    - POST: Send data to a specified URL\n      Parameters:\n        url (required): The URL to send the request to\n        data (optional): Form data to send (as a string or dictionary)\n        json (optional): JSON data to send (as a dictionary)\n        params (optional): Query parameters as a dictionary\n        headers (optional): HTTP headers as a dictionary\n        timeout (optional, default=30): Request timeout in seconds\n        response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n    - PUT: Update data at a specified URL\n      Parameters:\n        url (required): The URL to send the request to\n        data (optional): Form data to send (as a string or dictionary)\n        json (optional): JSON data to send (as a dictionary)\n        params (optional): Query parameters as a dictionary\n        headers (optional): HTTP headers as a dictionary\n        timeout (optional, default=30): Request timeout in seconds\n        response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n    - DELETE: Delete data at a specified URL\n      Parameters:\n        url (required): The URL to send the request to\n        params (optional): Query parameters as a dictionary\n        headers (optional): HTTP headers as a dictionary\n        timeout (optional, default=30): Request timeout in seconds\n        response_format (optional, default=\"json\"): Format to return the response in (\"json\", \"text\", or \"full\")\n    \n    RESPONSE FORMAT OPTIONS:\n    - \"json\": Automatically parse and return the JSON response (default)\n    - \"text\": Return the raw text response\n    - \"full\": Return a comprehensive response object with status, headers, and body\n    \n    USAGE NOTES:\n    - Always validate the URL before sending sensitive information\n    - Use appropriate headers for authentication (e.g., Authorization header)\n    - For GET requests, use params to send query parameters\n    - For POST/PUT requests, use either data (for form data) or json (for JSON data)\n    - The response_format parameter controls how the response is returned\n    - Check the status_code in the response to verify success (200-299 is success)\n    \n    LIMITATIONS:\n    - Cannot make requests to internal network addresses (security restriction)\n    - File uploads are not supported in the current version\n    - Redirects are followed by default (up to 5)\n    - Cookie persistence is not maintained between requests\n    - Binary responses are not supported (images, files, etc.)\n    ",
    "name": "http_tool",
    "parameters": {
      "data": {
        "description": "Optional data to send (for POST/PUT)",
        "type": "typing.Optional[typing.Any]"
      },
      "headers": {
        "description": "Optional HTTP headers as a dictionary",
        "type": "typing.Optional[typing.Dict[str, typing.Any]]"
      },
      "json": {
        "description": "Optional JSON data to send (for POST/PUT)",
        "type": "typing.Optional[typing.Dict[str, typing.Any]]"
      },
      "method": {
        "description": "HTTP method (GET, POST, PUT, DELETE)",
        "type": "str"
      },
      "params": {
        "description": "Optional query parameters as a dictionary",
        "type": "typing.Optional[typing.Dict[str, typing.Any]]"
      },
      "response_format": {
        "description": "Format to return the response in (json, text, full)",
        "type": "str"
      },
      "timeout": {
        "description": "Optional request timeout in seconds (default: 30)",
        "type": "typing.Optional[int]"
      },
      "url": {
        "description": "The URL to send the request to",
        "type": "str"
      }
    },
    "required_parameters": [
      "method",
      "url"
    ]
  },
  {
    "dependencies": [],
    "description": "Controls TP-Link Kasa smart home devices on your local network with comprehensive management capabilities.\n\nThis tool enables complete control of Kasa smart devices including:\n\n1. Device Discovery and Management:\n   - 'list_devices': Retrieve all configured Kasa devices on the network\n   - 'get_device_info': Get detailed status and capabilities of a specific device\n   - Each device has a unique identifier for consistent reference (e.g., 'living_room_lamp')\n\n2. Basic Device Control:\n   - 'set_device_state': Turn devices on or off (requires 'device_id' and 'state' parameters)\n   - Works with all Kasa device types including plugs, switches, and bulbs\n   - Returns confirmation of successful state changes\n\n3. Advanced Light Controls:\n   - 'set_brightness': Adjust light brightness levels from 0-100% (requires 'device_id' and 'brightness' parameters)\n   - 'set_color_temp': Change light color temperature in Kelvin (requires 'device_id' and 'color_temp' parameters)\n   - 'set_hsv': Set full color for RGB-capable bulbs using hue, saturation, value parameters\n\n4. Status Monitoring:\n   - Reports real-time device status (on/off state)\n   - For supported devices, provides power consumption and additional metrics\n\nUse this tool whenever you need to control or check the status of Kasa smart home devices on the local network.",
    "name": "kasa_tool",
    "parameters": {
      "brightness": {
        "description": "Brightness level (0-100)",
        "type": "typing.Optional[int]"
      },
      "color_temp": {
        "description": "Color temperature in Kelvin",
        "type": "typing.Optional[int]"
      },
      "device_id": {
        "description": "Device identifier from the mapping file (required for device-specific operations)",
        "type": "typing.Optional[str]"
      },
      "hue": {
        "description": "Hue (0-360)",
        "type": "typing.Optional[int]"
      },
      "operation": {
        "description": "Operation to perform (list_devices, get_device_info, set_device_state, set_brightness, set_color_temp, set_hsv)",
        "type": "str"
      },
      "saturation": {
        "description": "Saturation (0-100)",
        "type": "typing.Optional[int]"
      },
      "state": {
        "description": "Device state to set (True for on, False for off)",
        "type": "typing.Optional[bool]"
      },
      "value": {
        "description": "Value/brightness (0-100)",
        "type": "typing.Optional[int]"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "Provides comprehensive location intelligence and geographical services through Maps API integration.\n\nThis tool enables interaction with mapping services for various location-based operations including:\n\n1. geocode: Convert natural language locations to precise coordinates.\n   - Requires 'query' parameter with address, landmark, or place name\n   - Returns formatted address, geographic coordinates, and place information\n\n2. reverse_geocode: Convert coordinates to address information.\n   - Requires 'lat' and 'lng' parameters as decimal degrees\n   - Returns detailed address components for the specified location\n\n3. place_details: Retrieve comprehensive information about specific places.\n   - Requires 'place_id' parameter (unique place identifier)\n   - Returns name, address, phone number, website, opening hours, and other details\n\n4. places_nearby: Discover places around a specific location.\n   - Requires 'lat' and 'lng' parameters for center point\n   - Optional parameters: 'radius' (default 1000m), 'type' (e.g., restaurant), 'keyword', 'open_now'\n   - Returns matching places sorted by proximity with ratings and details\n\n5. find_place: Locate specific places by name or description.\n   - Requires 'query' parameter with place name\n   - Returns precise match results with location data\n\n6. calculate_distance: Determine distance between two geographic points.\n   - Requires 'lat1', 'lng1', 'lat2', 'lng2' parameters\n   - Returns distance in meters, kilometers, and miles\n\nUse this tool for any task requiring location resolution, place discovery, geocoding, or geographic calculations.",
    "name": "maps_tool",
    "parameters": {
      "fields": {
        "description": "Specific fields to request from the API (for find_place)",
        "type": "typing.Optional[typing.List[str]]"
      },
      "keyword": {
        "description": "Search keywords",
        "type": "typing.Optional[str]"
      },
      "language": {
        "description": "Language for results",
        "type": "typing.Optional[str]"
      },
      "lat": {
        "description": "Latitude for operations requiring coordinates",
        "type": "typing.Optional[float]"
      },
      "lat1": {
        "description": "First latitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lat2": {
        "description": "Second latitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lng": {
        "description": "Longitude for operations requiring coordinates",
        "type": "typing.Optional[float]"
      },
      "lng1": {
        "description": "First longitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "lng2": {
        "description": "Second longitude for distance calculations",
        "type": "typing.Optional[float]"
      },
      "open_now": {
        "description": "Filter results to those open at request time",
        "type": "typing.Optional[bool]"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations)",
        "type": "str"
      },
      "place_id": {
        "description": "Google Places ID for place details",
        "type": "typing.Optional[str]"
      },
      "query": {
        "description": "Search query for geocoding or places text search",
        "type": "typing.Optional[str]"
      },
      "radius": {
        "description": "Search radius in meters for nearby places",
        "type": "typing.Optional[int]"
      },
      "type": {
        "description": "Type of place (e.g., restaurant, cafe)",
        "type": "typing.Optional[str]"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "Manages interactive multi-question surveys to collect structured information from users without sending intermediate responses to the LLM.\n\nThis tool enables conducting comprehensive questionnaires with various customization options:\n\n1. Running Questionnaires:\n   - Use predefined questionnaires via 'questionnaire_id' parameter\n   - Create ad-hoc questionnaires with 'questions' parameter (simple string list)\n   - Design custom structured questionnaires with 'custom_questions' parameter\n   - Example: questionnaire_id=\"recipe\" or questions=[\"What's your name?\", \"Where do you live?\"]\n\n2. Question Types and Features:\n   - Simple text questions for free-form responses\n   - Multiple-choice questions with predefined options\n   - Dynamic question generation based on previous answers\n   - Preference key mapping for organizing responses with meaningful labels\n   - Automatic filtering of already-answered questions\n   \n3. Response Handling:\n   - Collects all responses locally without sending to LLM until complete\n   - Returns structured data with question/answer pairs\n   - Maps responses to semantic keys for easier preference management\n   - IMPORTANT: When presenting results, show only the raw data without interpretive commentary\n\nUse this tool whenever you need to gather multiple pieces of structured information from the user in a single interaction session.",
    "name": "questionnaire_tool",
    "parameters": {
      "context_data": {
        "description": "Optional contextual data to use for dynamic question generation and to filter out already answered questions",
        "type": "typing.Optional[typing.Dict[str, typing.Any]]"
      },
      "custom_questions": {
        "description": "Optional list of custom structured question objects Each object should contain at least 'id' and 'text' keys",
        "type": "typing.Optional[typing.List[typing.Dict[str, typing.Any]]]"
      },
      "questionnaire_id": {
        "description": "ID of the questionnaire to use (e.g., \"recipe\") or a name/description for a questionnaire created from simple questions",
        "type": "str"
      },
      "questions": {
        "description": "Optional list of question strings or a JSON string representing a list of strings for on-the-fly questionnaire creation.",
        "type": "typing.Optional[typing.List[str]]"
      }
    },
    "required_parameters": [
      "questionnaire_id"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Manages scheduled reminders with contact information integration. Use this tool when the user\n    wants to create, view, or manage reminders about tasks, follow-ups, or appointments.\n    \n    IMPORTANT: This tool requires parameters to be passed as a JSON string in the \"kwargs\" field.\n    \n    The tool supports these operations:\n    \n    1. add_reminder: Create a new reminder with a date, description, and optional contact info.\n       - Required: title (brief description), date (when to be reminded)\n       - Optional: description (details), contact_name, contact_email, contact_phone\n       - If a contact name is provided, attempts to find matching customer information\n       - Returns the created reminder with a unique identifier\n    \n    2. get_reminders: Retrieve reminders for a specific date range.\n       - Required: date_type (\"today\", \"tomorrow\", \"upcoming\", \"past\", \"all\", \"date\" or \"range\")\n       - If date_type is \"date\", requires specific_date parameter\n       - If date_type is \"range\", requires start_date and end_date parameters\n       - Returns list of reminders matching the criteria\n    \n    3. mark_completed: Mark a reminder as completed.\n       - Required: reminder_id (the ID of the reminder to mark as completed)\n       - Returns the updated reminder\n       \n    4. update_reminder: Update an existing reminder's details.\n       - Required: reminder_id (the ID of the reminder to update)\n       - Optional: Any fields to update (title, description, date, contact information)\n       - Returns the updated reminder\n       \n    5. delete_reminder: Remove a reminder.\n       - Required: reminder_id (the ID of the reminder to delete)\n       - Returns confirmation of deletion\n       \n    This tool automatically integrates with the customer database when contact names are provided,\n    fetching complete contact information for known customers. When creating reminders with a name\n    that doesn't match an existing customer, the tool will prompt for additional contact details.\n    ",
    "name": "reminder_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Parameters for the specific operation",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  },
  {
    "dependencies": [],
    "description": "Controls Ring security devices with comprehensive management capabilities.\n\nThis tool enables interaction with Ring security systems including:\n\n1. Device and Location Management:\n   - 'list_locations': Retrieve all available Ring locations\n   - 'list_devices': Retrieve all devices for a specific location\n   - 'get_device_info': Get detailed status and capabilities of a specific device\n\n2. Alarm System Control:\n   - 'get_alarm_mode': Check current mode of alarm system (disarmed, home, away)\n   - 'set_alarm_mode': Set alarm mode (disarmed, home, away)\n\nUse this tool whenever you need to check the status of or control Ring security devices.\nThe tool requires authentication with a Ring account through a refresh token.\n",
    "name": "ring_tool",
    "parameters": {
      "device_id": {
        "description": "The ID of the device to operate on",
        "type": "typing.Optional[str]"
      },
      "location_id": {
        "description": "The ID of the location to operate on",
        "type": "typing.Optional[str]"
      },
      "mode": {
        "description": "Mode to set (for set_alarm_mode operation)",
        "type": "typing.Optional[str]"
      },
      "operation": {
        "description": "Operation to perform (list_locations, list_devices, etc.)",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation"
    ]
  },
  {
    "dependencies": [],
    "description": "\n    Retrieves detailed weather information for any specified location. This tool provides current \n    weather data including temperature, conditions, humidity, and wind speed. Use this tool whenever \n    the user asks about weather conditions for a specific location or needs weather-related information \n    for planning purposes.\n    \n    The 'location' parameter accepts any city or region name and is required. The 'units' parameter \n    controls temperature format and defaults to celsius but can be set to fahrenheit. The optional \n    'include_forecast' parameter, when set to true, will return a 5-day weather forecast in addition \n    to current conditions.\n    \n    Note that this tool generates fictional weather data and should not be used for actual weather \n    planning or emergency situations. Response times are typically under 1 second. The tool does not \n    provide historical weather data or severe weather warnings.\n    ",
    "name": "weather_tool",
    "parameters": {
      "include_forecast": {
        "description": "Whether to include a 5-day forecast (defaults to False)",
        "type": "bool"
      },
      "location": {
        "description": "The city or location to get weather for (required)",
        "type": "str"
      },
      "units": {
        "description": "Temperature units ('celsius' or 'fahrenheit', defaults to 'celsius')",
        "type": "str"
      }
    },
    "required_parameters": [
      "location"
    ]
  },
  {
    "dependencies": [],
    "description": "Provides comprehensive access to Square's business management APIs for customer, booking, and catalog operations.\n\nThis tool enables interaction with Square's platform through the following operations:\n\n1. Customer Management Operations:\n   - list_customers: Retrieve a paginated list of all customer profiles\n     - Optional parameters: 'limit', 'cursor', 'sort_field', 'sort_order', 'count'\n   - retrieve_customer: Get detailed information about a specific customer\n     - Required parameter: 'customer_id'\n   - create_customer: Add a new customer to your Square account\n     - Required parameter: 'body' containing customer fields (given_name, family_name, email_address, phone_number, etc.)\n   - update_customer: Modify an existing customer's information\n     - Required parameters: 'customer_id', 'body' with fields to update\n   - delete_customer: Remove a customer from your Square account\n     - Required parameter: 'customer_id'\n   - bulk_create_customers: Add multiple customers in a single operation\n   - bulk_retrieve_customers: Get information about multiple customers\n   - bulk_update_customers: Modify multiple customer profiles simultaneously\n   - bulk_delete_customers: Remove multiple customers at once\n\n2. Booking Management Operations:\n   - create_booking: Schedule a new appointment\n     - Required parameter: 'body' with booking details \n   - retrieve_booking: Get information about a specific booking\n     - Required parameter: 'booking_id'\n   - update_booking: Modify an existing booking's details\n     - Required parameters: 'booking_id', 'body' with fields to update\n   - cancel_booking: Cancel a scheduled appointment\n     - Required parameters: 'booking_id', 'body' with cancellation details\n   - list_bookings: Retrieve a list of bookings with filtering options\n     - Optional parameters: 'customer_id', 'location_id', 'start_at_min', 'start_at_max'\n   - search_availability: Find available appointment times\n     - Required parameter: 'body' with search criteria\n   - retrieve_business_booking_profile: Get business booking settings\n   - list_team_member_booking_profiles: Get booking information for staff members\n\n3. Catalog Management Operations:\n   - list_catalog: Retrieve a list of catalog objects by type\n     - Optional parameters: 'cursor', 'types', 'catalog_version'\n   - retrieve_catalog_object: Get detailed information about a specific catalog object\n     - Required parameter: 'object_id'\n   - search_catalog_objects: Search for catalog objects using filters\n     - Required parameter: 'body' with search criteria\n   - search_catalog_items: Search specifically for catalog items with advanced filters\n     - Required parameter: 'body' with search criteria\n   - upsert_catalog_object: Create or update a catalog object\n     - Required parameter: 'body' with the object details\n   - delete_catalog_object: Remove a catalog object\n     - Required parameter: 'object_id'\n   - batch_delete_catalog_objects: Delete multiple catalog objects in one operation\n     - Required parameter: 'body' with object IDs\n   - batch_retrieve_catalog_objects: Get multiple catalog objects in one request\n     - Required parameter: 'body' with object IDs\n   - batch_upsert_catalog_objects: Create or update multiple catalog objects\n     - Required parameter: 'body' with objects to upsert\n   - catalog_info: Get information about the catalog API\n\nUse this tool whenever you need to manage appointment scheduling or work with catalog items through Square's platform.\n\n\u26a0\ufe0f CRITICAL: For creating a booking, you MUST enable and use BOTH square_tool AND customer_tool together. \u26a0\ufe0f\n\nThis tool does NOT have customer search capability:\n- NEVER use square_tool.list_customers to search for a specific customer - it will list ALL customers and is inefficient\n- You MUST enable and use customer_tool for all customer searching (by name, email, phone, address)\n- When a user mentions a customer name for booking, ALWAYS enable the customer_tool and use it to search\n- Square's booking system requires customer_ids that only customer_tool can find efficiently\n\nFor creating a booking:\n1. First enable BOTH square_tool AND customer_tool - both are required\n2. Use customer_tool.search_customers to find the customer by name\n3. If customer exists, use their ID from customer_tool's search results\n4. If customer doesn't exist, create them with square_tool.create_customer\n5. Only then proceed with creating the booking with the appropriate customer ID",
    "name": "square_tool",
    "parameters": {
      "kwargs": {
        "description": "Parameter: kwargs",
        "type": "any"
      },
      "operation": {
        "description": "Operation to perform (see below for valid operations) **kwargs: Parameters for the specific operation",
        "type": "str"
      }
    },
    "required_parameters": [
      "operation",
      "kwargs"
    ]
  }
]