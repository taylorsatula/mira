{
  "id": "smart_home_automation",
  "name": "Smart Home Automation Setup",
  "version": 2,
  "description": "Process for creating complex home automation routines with conditional logic",
  "trigger_examples": [
    "I want to create a home automation",
    "Set up a smart home routine",
    "Create an automated task for my smart home",
    "Configure my home to do things automatically",
    "Make my lights turn on automatically",
    "Schedule my home to do something"
  ],
  "entry_points": ["automation_type"],
  
  "steps": {
    "automation_type": {
      "id": "automation_type",
      "description": "Determine automation type",
      "tools": [],
      "guidance": "Ask the user what type of automation they want to create. Common types include: time-based (runs at specific times), event-based (triggers on events like sunset or arriving home), or sensor-based (responds to motion, temperature, etc.).",
      "prerequisites": [],
      "optional": false,
      "provides_data": ["automation_type", "automation_name"],
      "next_suggestions": ["schedule_info", "trigger_info", "sensor_info"]
    },
    
    "schedule_info": {
      "id": "schedule_info",
      "description": "Collect schedule information",
      "tools": ["calendar_tool"],
      "guidance": "For time-based automations, collect the schedule details: one-time or recurring, specific days, times, etc. Optionally look up the user's calendar to avoid conflicts.",
      "prerequisites": ["automation_type"],
      "optional": true,
      "provides_data": ["schedule_type", "run_time", "run_days", "recurrence"],
      "next_suggestions": ["action_selection"],
      "condition": "workflow_data.automation_type === 'time-based'"
    },
    
    "trigger_info": {
      "id": "trigger_info",
      "description": "Configure event trigger",
      "tools": [],
      "guidance": "For event-based automations, determine the triggering event (sunset/sunrise, home arrival/departure, door opening, etc.). Ask for any specific conditions or parameters.",
      "prerequisites": ["automation_type"],
      "optional": true,
      "provides_data": ["trigger_event", "trigger_conditions"],
      "next_suggestions": ["action_selection"],
      "condition": "workflow_data.automation_type === 'event-based'"
    },
    
    "sensor_info": {
      "id": "sensor_info",
      "description": "Configure sensor parameters",
      "tools": [],
      "guidance": "For sensor-based automations, identify which sensors will trigger the automation and what readings should activate it. Ask about thresholds, durations, or other conditions.",
      "prerequisites": ["automation_type"],
      "optional": true,
      "provides_data": ["sensor_type", "sensor_location", "threshold_value", "threshold_duration"],
      "next_suggestions": ["action_selection"],
      "condition": "workflow_data.automation_type === 'sensor-based'"
    },
    
    "action_selection": {
      "id": "action_selection",
      "description": "Select automation actions",
      "tools": [],
      "guidance": "Ask what actions should occur when the automation is triggered. Common options: lights on/off, adjusting thermostats, playing music, sending notifications, etc. Can select multiple actions.",
      "prerequisites": ["automation_type"],
      "requires_data": ["automation_type"],
      "optional": false,
      "provides_data": ["primary_action", "secondary_actions", "has_conditions"],
      "next_suggestions": ["condition_definition", "notification_setup", "confirmation"]
    },
    
    "condition_definition": {
      "id": "condition_definition",
      "description": "Define conditional logic",
      "tools": [],
      "guidance": "If the automation needs conditional logic, help define the conditions and alternative actions. For example, 'Turn on lights only if it's dark', or 'Only if someone is home'.",
      "prerequisites": ["action_selection"],
      "optional": true,
      "provides_data": ["condition_type", "condition_value", "alternative_action"],
      "next_suggestions": ["notification_setup", "confirmation"],
      "condition": "workflow_data.has_conditions"
    },
    
    "notification_setup": {
      "id": "notification_setup",
      "description": "Configure notifications",
      "tools": ["email_tool"],
      "guidance": "Ask if the user wants to be notified when the automation runs. If so, collect details on notification method (push, email, etc.) and contents. Email tool is only needed if testing the notification.",
      "prerequisites": ["action_selection"],
      "optional": true,
      "provides_data": ["notification_enabled", "notification_method", "notification_message"],
      "next_suggestions": ["confirmation"]
    },
    
    "confirmation": {
      "id": "confirmation",
      "description": "Review and confirm automation",
      "tools": [],
      "guidance": "Summarize the complete automation setup for the user to confirm. Include all triggers, conditions, actions, and notification settings.",
      "prerequisites": ["action_selection"],
      "requires_data": ["automation_name", "automation_type"],
      "optional": false,
      "provides_data": ["user_confirmation"],
      "next_suggestions": ["save_automation"]
    },
    
    "save_automation": {
      "id": "save_automation",
      "description": "Save the automation",
      "tools": ["scheduler_tool"],
      "guidance": "Save the automation configuration using the scheduler tool and confirm the setup is complete. Provide any relevant information about how to monitor or modify it later.",
      "prerequisites": ["confirmation"],
      "requires_data": ["user_confirmation"],
      "optional": false,
      "provides_data": ["automation_id", "success_message"],
      "next_suggestions": []
    }
  },
  
  "completion_requirements": {
    "required_steps": ["save_automation"],
    "required_data": ["automation_id", "success_message"]
  },
  
  "data_schema": {
    "automation_type": {"type": "string", "description": "Type of automation (time-based, event-based, sensor-based)"},
    "automation_name": {"type": "string", "description": "User-friendly name for the automation"},
    "schedule_type": {"type": "string", "description": "One-time or recurring schedule"},
    "run_time": {"type": "string", "description": "Time of day to run the automation"},
    "run_days": {"type": "array", "description": "Days of the week to run the automation"},
    "recurrence": {"type": "string", "description": "Recurrence pattern for the automation"},
    "trigger_event": {"type": "string", "description": "Event that triggers the automation"},
    "trigger_conditions": {"type": "object", "description": "Additional conditions for the trigger"},
    "sensor_type": {"type": "string", "description": "Type of sensor for trigger"},
    "sensor_location": {"type": "string", "description": "Location of the sensor"},
    "threshold_value": {"type": "string", "description": "Threshold value that triggers the automation"},
    "threshold_duration": {"type": "string", "description": "How long the threshold must be exceeded"},
    "primary_action": {"type": "string", "description": "Primary action to take when triggered"},
    "secondary_actions": {"type": "array", "description": "Additional actions to take when triggered"},
    "has_conditions": {"type": "boolean", "description": "Whether the automation has conditional logic"},
    "condition_type": {"type": "string", "description": "Type of condition to check"},
    "condition_value": {"type": "string", "description": "Value to check against the condition"},
    "alternative_action": {"type": "string", "description": "Action to take if condition is not met"},
    "notification_enabled": {"type": "boolean", "description": "Whether to send notifications"},
    "notification_method": {"type": "string", "description": "Method for sending notifications"},
    "notification_message": {"type": "string", "description": "Message to include in notifications"},
    "user_confirmation": {"type": "boolean", "description": "User has confirmed the automation details"},
    "automation_id": {"type": "string", "description": "Unique identifier for the saved automation"},
    "success_message": {"type": "string", "description": "Message confirming successful automation setup"}
  }
}