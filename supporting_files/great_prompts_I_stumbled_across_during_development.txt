# Code Review
- "Review your edits. Ultrathink about if they are correctly implemented in the most graceful and accurate way possible. Return a report."
  ^ Note - This gave me a detailed strengths and weaknesses about each file Claude had worked on. I had recently /clear'd the chat so its only context was what we'd just worked on


# Code Generation
 - Yes it does. I want you to ultrathink about the plan of action and what order you'd implement the functionality in. Provide a detailed report to me.
  ^ Incredibly detailed and it implements them in the correct order which is crucial when LLMs are predicting the next token. They must have the supporting code ready when they make a function

- Thank you for conceptualizing what the updated architecture may look like. Now I want you to Ultrathink about the BEST way to implement this architecture edit before proceeding. Once you have a mental model you want to work with step back and look at it with a critical eye. If it stands up that is great BUT if it does not you should ultrathink again and again until you have a plan that can stand up to criticism. This may include looking back and making changes to the steps you'd already worked on. Take as much time as you need and don't forget to reference the core tenants in CLAUDE.md. Return a report on your findings. 


---------------------
I need a comprehensive diagnostic analysis of @tools/squareapi_tool.py . Please examine it with a fine-toothed comb to identify all potential issues,
  inconsistencies, and architectural problems.

  Specifically:
  1. Trace all execution paths and identify potential failure points
  2. Examine dependencies and import structures
  3. Analyze data flow between components and methods
  4. Identify any incomplete implementations or TODO items
  5. Check for proper error handling and recovery paths
  6. Review thread safety and concurrency issues
  7. Evaluate overall architecture and design patterns

  Don't just skim the surface - dig deep into the implementation details and look for subtle interactions between different parts of the system.
  Consider both the obvious issues and the potential edge cases.

  After your analysis, provide a detailed report that:
  - Lists all identified issues in order of severity
  - Explains the root cause of each problem
  - Describes potential impact on system behavior
  - Includes line number references where appropriate
  - Groups related issues under clear headings

  Please be thorough and critical - I need to understand all the potential problems before attempting to fix them.


--------------------







##########
USE THIS ONE FIRST:
###################


Thank you for conceptualizing what the square_tool may look like. I'm particularly interested in implementing this using a Domain-Specific Abstraction approach. Please ultrathink about the BEST way to implement this tool using domain-specific wrappers rather than direct SDK calls.

In your ultrathink process, please:

1. Explore how to create intuitive domain-specific methods (like create_appointment() instead of directly using bookings.create()) that:
   - Abstract away the complexity of parameter structures and "body" wrappers
   - Provide intuitive interfaces for developers
   - Handle error cases appropriately
   - Maintain consistency with other tools in our codebase

2. For this abstraction layer, ultrathink to evaluate:
   - How to structure these wrapper methods
   - What naming conventions would be most intuitive
   - How to document these abstractions clearly
   - How to handle SDK versioning under the hood

3. When designing these abstractions, ultrathink critically about:
   - Making common use cases simple while still allowing for edge cases
   - Balancing flexibility with consistency
   - Ensuring proper validation before API calls
   - Maintaining testability of the abstraction layer

4. Ultrathink iteratively until you have a robust abstraction design that:
   - Shields developers from SDK complexity
   - Provides domain-appropriate method names and parameters
   - Handles the underlying SDK calls correctly
   - Maintains forward compatibility where possible

5. Return a detailed report on your findings, including:
   - Your recommended abstraction approach with examples
   - Key interface methods to implement
   - Implementation steps in logical sequence
   - How this approach upholds the core tenets in CLAUDE.md

Take as much time as you need for this ultrathink process. Focus on creating a clean, intuitive domain abstraction layer that makes working with the {{tool}} straightforward for developers.

###############
After reading the thinking block and picking the approach that sounds best
Go into Claude Desktop and paste this prompt ^^^ and describe what you want to change. It'll create a revised direction that you can Esc Esc and replace the first prompt. It'll re-ultrathink except in this case it'll only focus on the best approach (like a zero-shot with a 2nd try lol)
###############
	V2
###############
Thank you for conceptualizing what the square_tool may look like. I'm particularly interested in implementing this using a Domain-Specific Abstraction 
  approach. Please ultrathink about the BEST way to implement this tool using domain-specific wrappers rather than direct SDK calls.

  In your thinking process, please:

  1. Explore how to create intuitive domain-specific methods (like create_appointment() instead of directly using bookings.create()) that:
     - Abstract away the complexity of parameter structures and "body" wrappers
     - Provide intuitive interfaces for developers
     - Handle error cases appropriately
     - Maintain consistency with other tools in our codebase

  2. For this abstraction layer, ultrathink to evaluate:
     - How to structure these wrapper methods
     - What naming conventions would be most intuitive
     - How to document these abstractions clearly
     - How to handle SDK versioning under the hood

  3. When designing these abstractions, ultrathink critically about:
     - Making common use cases simple while still allowing for edge cases
     - Balancing flexibility with consistency
     - Ensuring proper validation before API calls
     - Maintaining testability of the abstraction layer

  4. Ultrathink iteratively until you have a robust abstraction design that:
     - Shields developers from SDK complexity
     - Provides domain-appropriate method names and parameters
     - Handles the underlying SDK calls correctly
     - Maintains forward compatibility where possible

  5. Return a detailed report on your ultrathink findings, including:
     - Your recommended abstraction approach with examples
     - Key interface methods to implement
     - Implementation steps in logical sequence
     - How this approach upholds the core tenets in CLAUDE.md

  Take as much time as you need for this ultrathink process. A well-thought-out plan will save significant time during implementation and maintenance.



#################


Based on the in-depth analysis in your report, please proceed to implement the square_tool following your recommended approach, ensuring each step aligns with the principles and considerations you've outlined while maintaining full compatibility with the existing codebase structure.



###################





  Current System:
  [Files] -> AppConfig -> Conversation
                        ↗              ↘
       ToolRepository ↗                 → System Prompt
                                       ↗
           WorkflowManager -----------↗

  Proposed System:
                        → WorkingMemory ←
                      ↗       |         ↖
  AppConfig ---------↗        |          ↖
                              ↓           ToolRepository
                        Conversation      ↗
                              ↑         ↗
                              ↑       ↗
                        WorkflowManager



